/*
 * -------------------------------------------------
 *  lehtiolab/nf-labelcheck Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  outdir = './results'
  // Boilerplate options
  name = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  external_config_version = 'master'
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
//process.container = 'nf-labelcheck:dev'
process.container = 'lehtiolab/nf-labelcheck:2.1'

includeConfig 'conf/base.config'

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }

  conda { process.conda = "$baseDir/environment.yml" }

  debug { process.beforeScript = 'echo $HOSTNAME' }

  docker { 
    docker.enabled = true
    docker.fixOwnership = true
    docker.runOptions = '-u $(id -u):$(id -g)'
  }
  singularity {
    singularity.enabled = true
  }
  test {
    includeConfig 'conf/test.config'
  }
  lehtio { 
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${params.external_config_version}/nf-configs/lehtio.config"
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')

timeline {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/lehtiolab/execution_dag_${trace_timestamp}.svg"
}

manifest {
  name = 'lehtiolab/nf-labelcheck'
  author = 'Jorrit Boekel'
  homePage = 'https://github.com/lehtiolab/nf-labelcheck'
  description = 'A proteomics pipeline for running labelchecks outputting a report'
  mainScript = 'main.nf'
  nextflowVersion = '>=22.10.5'
  version = '2.2'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
